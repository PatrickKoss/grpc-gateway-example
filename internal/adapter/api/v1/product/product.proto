syntax = "proto3";
package grpc.gateway.example.internal.adapter.api.v1.product;
option go_package = "github.com/patrickkoss/grpc-gateway-example/internal/adapter/api/v1/product";

import "include/googleapis/google/api/annotations.proto";
import "include/grpc-gateway/protoc-gen-openapiv2/options/annotations.proto";
import "internal/adapter/api/domain/proto/message.proto";

message ProductId{
  string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "productId"}}];
}

message Aggregation {
  optional string eq = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "eq"}, description: "exact match"}];
  optional string like = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "like"}}];
}

message Page {
  optional string size = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "size"}}];
  optional string eq = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "eq"}}];
}

message ProductParams {
  optional Page page = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "page"}, description: "page size", title: "page[size]"}, json_name="page"];
  optional Aggregation name = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {field_configuration: {path_param_name: "name"}, description: "filter the product name by exact match"}, json_name="name"];
}

message Product {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Product"
      description: "Product to sell"
      required: ["name", "id", "description", "price"]
    }
    example: "{\"name\": \"television\", \"price\": 1000.0, \"description\": \"device to watch tv shows\", \"id\": \"cc7bf575-3d74-4337-a41d-bfb5fb5f3284\"}"
  };

  string id = 1;
  string name = 2;
  string description = 3;
  double price = 4;
}

message CreateProductBody {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Product to create"
      description: "Product to create"
      required: ["name", "description", "price"]
    }
    example: "{\"name\": \"television\", \"price\": 1000.0, \"description\": \"device to watch tv shows\"}"
  };

  string name = 1;
  string description = 2;
  double price = 3;
}

message ListProductsResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "List all products"
      description: "List all products"
      required: ["products"]
    }
    example: "{\"products\": [{\"name\": \"television\", \"price\": 1000.0, \"description\": \"device to watch tv shows\", \"id\": \"cc7bf575-3d74-4337-a41d-bfb5fb5f3284\"}]}"
  };

  repeated Product products = 1;
}

message GetProductResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Get single product"
      description: "Single product"
      required: ["product"]
    }
    example: "{\"product\": {\"name\": \"television\", \"price\": 1000.0, \"description\": \"device to watch tv shows\", \"id\": \"cc7bf575-3d74-4337-a41d-bfb5fb5f3284\"}}"
  };

  Product product = 1;
}

service ProductService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Product"
    name: "Product"
  };
  rpc CreateProduct(CreateProductBody) returns (domain.Message) {
    option (google.api.http) = {
      post: "/v1/products"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201",
        value: {
          description: "Create a product";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        },
      },
      responses: {
        key: "400",
        value: {
          description: "Invalid input";
          schema: {
            json_schema: {ref: "#/definitions/domainErrorMessage"}
          }
        },
      },
      responses: {
        key: "409",
        value: {
          description: "Already exists";
          schema: {
            json_schema: {ref: "#/definitions/domainErrorMessage"}
          }
        },
      },
      responses: {
        key: "default",
        value: {
          description: "unexpected error";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        },
      },
    };
  }
  rpc GetProducts(ProductParams) returns (ListProductsResponse) {
    option (google.api.http) = {
      get: "/v1/products"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200",
        value: {
          description: "List all products";
          schema: {
            json_schema: {ref: "#/definitions/productListProductsResponse"}
          }
        }
      }
      responses: {
        key: "default",
        value: {
          description: "unexpected error";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        },
      },
    };
  }
  rpc GetProduct(ProductId) returns (GetProductResponse) {
    option (google.api.http) = {
      get: "/v1/products/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200",
        value: {
          description: "Get single product";
          schema: {
            json_schema: {ref: "#/definitions/productGetProductResponse"}
          }
        }
      }
      responses: {
        key: "404",
        value: {
          description: "Product not found";
          schema: {
            json_schema: {ref: "#/definitions/domainErrorMessage"}
          }
        },
      },
      responses: {
        key: "default",
        value: {
          description: "unexpected error";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        },
      },
    };
  }
  rpc DeleteProduct(ProductId) returns (domain.Message) {
    option (google.api.http) = {
      delete: "/v1/products/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200",
        value: {
          description: "Delete product";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        }
      }
      responses: {
        key: "404",
        value: {
          description: "Product not found";
          schema: {
            json_schema: {ref: "#/definitions/domainErrorMessage"}
          }
        },
      },
      responses: {
        key: "default",
        value: {
          description: "unexpected error";
          schema: {
            json_schema: {ref: "#/definitions/domainMessage"}
          }
        },
      },
    };
  }
}
